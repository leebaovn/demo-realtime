[{"D:\\BAO\\demo-realtime\\src\\index.js":"1","D:\\BAO\\demo-realtime\\src\\firebase\\index.js":"2","D:\\BAO\\demo-realtime\\src\\components\\ColumnChart\\index.js":"3","D:\\BAO\\demo-realtime\\src\\components\\Auth\\signin.js":"4","D:\\BAO\\demo-realtime\\src\\components\\Layout\\header.js":"5","D:\\BAO\\demo-realtime\\src\\components\\Auth\\login.js":"6","D:\\BAO\\demo-realtime\\src\\apis\\index.js":"7","D:\\BAO\\demo-realtime\\src\\components\\Room\\index.js":"8","D:\\BAO\\demo-realtime\\src\\components\\Modal\\create_room.js":"9","D:\\BAO\\demo-realtime\\src\\pages\\Room\\room-detail.js":"10","D:\\BAO\\demo-realtime\\src\\components\\Modal\\create_question.js":"11","D:\\BAO\\demo-realtime\\src\\pages\\Guest\\index.js":"12","D:\\BAO\\demo-realtime\\src\\App.js":"13","D:\\BAO\\demo-realtime\\src\\components\\Auth\\guest_login.js":"14","D:\\BAO\\demo-realtime\\src\\utils\\index.js":"15","D:\\BAO\\demo-realtime\\src\\components\\EditableCell\\index.js":"16","D:\\BAO\\demo-realtime\\src\\components\\Layout\\index.js":"17","D:\\BAO\\demo-realtime\\src\\contexts\\guest\\guest-context.js":"18","D:\\BAO\\demo-realtime\\src\\contexts\\room\\room-context.js":"19","D:\\BAO\\demo-realtime\\src\\components\\Notification\\index.js":"20","D:\\BAO\\demo-realtime\\src\\pages\\Room\\index.js":"21"},{"size":442,"mtime":1606707811792,"results":"22","hashOfConfig":"23"},{"size":655,"mtime":1606796422827,"results":"24","hashOfConfig":"23"},{"size":1021,"mtime":1607328558789,"results":"25","hashOfConfig":"23"},{"size":2958,"mtime":1607325117279,"results":"26","hashOfConfig":"23"},{"size":1330,"mtime":1607325355352,"results":"27","hashOfConfig":"23"},{"size":2512,"mtime":1607324679001,"results":"28","hashOfConfig":"23"},{"size":1144,"mtime":1607323702812,"results":"29","hashOfConfig":"23"},{"size":6809,"mtime":1607338698478,"results":"30","hashOfConfig":"23"},{"size":1603,"mtime":1607392891278,"results":"31","hashOfConfig":"23"},{"size":9414,"mtime":1607338641347,"results":"32","hashOfConfig":"23"},{"size":3201,"mtime":1607392584737,"results":"33","hashOfConfig":"23"},{"size":6156,"mtime":1607338702812,"results":"34","hashOfConfig":"23"},{"size":1412,"mtime":1606977434067,"results":"35","hashOfConfig":"23"},{"size":2246,"mtime":1607325866269,"results":"36","hashOfConfig":"23"},{"size":1136,"mtime":1607315776196,"results":"37","hashOfConfig":"23"},{"size":717,"mtime":1606722907392,"results":"38","hashOfConfig":"23"},{"size":253,"mtime":1607329085972,"results":"39","hashOfConfig":"23"},{"size":1305,"mtime":1606976380158,"results":"40","hashOfConfig":"23"},{"size":748,"mtime":1607335149387,"results":"41","hashOfConfig":"23"},{"size":660,"mtime":1607325646464,"results":"42","hashOfConfig":"23"},{"size":141,"mtime":1606719645959,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"nho8wy",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\BAO\\demo-realtime\\src\\index.js",[],["92","93"],"D:\\BAO\\demo-realtime\\src\\firebase\\index.js",[],["94","95"],"D:\\BAO\\demo-realtime\\src\\components\\ColumnChart\\index.js",[],["96","97"],"D:\\BAO\\demo-realtime\\src\\components\\Auth\\signin.js",[],"D:\\BAO\\demo-realtime\\src\\components\\Layout\\header.js",["98","99","100","101"],"D:\\BAO\\demo-realtime\\src\\components\\Auth\\login.js",[],"D:\\BAO\\demo-realtime\\src\\apis\\index.js",[],"D:\\BAO\\demo-realtime\\src\\components\\Room\\index.js",["102"],"D:\\BAO\\demo-realtime\\src\\components\\Modal\\create_room.js",[],"D:\\BAO\\demo-realtime\\src\\pages\\Room\\room-detail.js",["103","104","105"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { Table, Form, Button, Modal, Tooltip } from 'antd'\r\nimport EditableCell from './../../components/EditableCell'\r\nimport firebase, { firestore } from './../../firebase'\r\nimport axios from './../../apis'\r\nimport ModalCreate from './../../components/Modal/create_question'\r\nimport {\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  SaveOutlined,\r\n  CloseOutlined,\r\n  PlusOutlined,\r\n  ArrowLeftOutlined,\r\n  QrcodeOutlined,\r\n} from '@ant-design/icons'\r\nimport QRCode from 'qrcode.react'\r\nimport roomContext from './../../contexts/room/room-context'\r\nimport notification, { typeNotificaton } from './../../components/Notification'\r\nimport tinyUrl from 'tinyurl'\r\nimport './room.style.css'\r\nfunction RoomDetail() {\r\n  const { id } = useParams()\r\n  const [form] = Form.useForm()\r\n  const [{ room }, roomDispatch] = useContext(roomContext)\r\n  const roomRef = firestore.collection('room')\r\n  const roomTitle = room?.title\r\n  //define state section\r\n  const [questions, setQuestions] = useState([])\r\n  const [editingKey, setEditingKey] = useState('')\r\n  const [visible, setVisible] = useState(false)\r\n  const [loading, setLoading] = useState(false)\r\n  const isEditing = (record) => record.id === editingKey\r\n  const fetchQuestions = async () => {\r\n    setLoading(true)\r\n    const question = await axios.get(`/question/${id}`)\r\n    setQuestions(question.data)\r\n    setLoading(false)\r\n  }\r\n  const createQuestion = async (questionData) => {\r\n    setLoading(true)\r\n    try {\r\n      if (questionData) {\r\n        const newQuestion = await axios.post(\r\n          `/question/create/${id}`,\r\n          questionData\r\n        )\r\n        setQuestions((pre) => [...pre, newQuestion.data])\r\n        notification(typeNotificaton.success, 'Question created')\r\n      }\r\n    } catch (err) {\r\n      notification(typeNotificaton.error, 'Error occurs')\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  const deleteQuestion = async (id) => {\r\n    try {\r\n      await axios.delete(`/question/${id}`)\r\n      const newData = [...questions]\r\n      const index = newData.findIndex((item) => id === item.id)\r\n      if (index > -1) {\r\n        newData.splice(index, 1)\r\n        setQuestions(newData)\r\n      } else {\r\n        setQuestions(newData)\r\n      }\r\n      notification(typeNotificaton.success, 'Question deleted')\r\n    } catch (err) {\r\n      notification(typeNotificaton.error, 'Error occurs')\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      if (user) {\r\n        fetchQuestions()\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  const listenForActiveUser = async () => {\r\n    // if (!!currentUserId) {\r\n    roomRef.doc(id).onSnapshot((snapshot) => {\r\n      const roomSnapshot = Object.assign({}, snapshot.data(), {\r\n        id: snapshot.id,\r\n      })\r\n      if (roomSnapshot) {\r\n        roomDispatch({ type: 'MODIFIED', payload: { data: roomSnapshot } })\r\n      }\r\n    })\r\n    // }\r\n  }\r\n\r\n  useEffect(() => {\r\n    listenForActiveUser()\r\n  }, [])\r\n\r\n  const edit = (record) => {\r\n    form.setFieldsValue({\r\n      question: '',\r\n      correctAns: '',\r\n      answerA: '',\r\n      responseTime: '',\r\n      answerB: '',\r\n      answerC: '',\r\n      answerD: '',\r\n      ...record,\r\n    })\r\n    setEditingKey(record.id)\r\n  }\r\n  const cancel = () => {\r\n    setEditingKey('')\r\n  }\r\n\r\n  const show = async (id) => {\r\n    try {\r\n      await axios.post(`/question/${id}`)\r\n      notification(typeNotificaton.success, 'Question showed')\r\n    } catch (err) {\r\n      notification(typeNotificaton.error, 'Error occurs')\r\n    }\r\n  }\r\n\r\n  const save = async (id) => {\r\n    try {\r\n      const row = await form.validateFields()\r\n      await axios.patch(`/question/${id}`, row)\r\n      const newData = [...questions]\r\n      const index = newData.findIndex((item) => id === item.id)\r\n      if (index > -1) {\r\n        const item = newData[index]\r\n        newData.splice(index, 1, {\r\n          ...item,\r\n          ...row,\r\n        })\r\n        setQuestions(newData)\r\n        setEditingKey('')\r\n      } else {\r\n        newData.push(row)\r\n        setQuestions(newData)\r\n        setEditingKey('')\r\n      }\r\n      notification(typeNotificaton.success, 'Question editted')\r\n    } catch (errInfo) {\r\n      notification(typeNotificaton.error, 'Error occurs')\r\n    }\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: '質問',\r\n      dataIndex: 'question',\r\n      editable: true,\r\n      width: '14vw',\r\n    },\r\n\r\n    {\r\n      title: '期限',\r\n      dataIndex: 'responseTime',\r\n      editable: true,\r\n      width: '10vw',\r\n\r\n      render: (time) => {\r\n        return `${time}s`\r\n      },\r\n    },\r\n    {\r\n      title: 'A',\r\n      dataIndex: 'answerA',\r\n      editable: true,\r\n      width: '14vw',\r\n    },\r\n    {\r\n      title: 'B',\r\n      dataIndex: 'answerB',\r\n      width: '14vw',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'C',\r\n      dataIndex: 'answerC',\r\n      width: '14vw',\r\n      editable: true,\r\n    },\r\n    {\r\n      title: 'D',\r\n      dataIndex: 'answerD',\r\n      width: '14vw',\r\n      editable: true,\r\n    },\r\n\r\n    {\r\n      title: '行動',\r\n      width: '20vw',\r\n\r\n      render: (_, record) => {\r\n        const editable = isEditing(record)\r\n        return editable ? (\r\n          <>\r\n            <Tooltip placement='top' title={'キャンセル'}>\r\n              <Button\r\n                style={{ marginRight: '1rem' }}\r\n                onClick={cancel}\r\n                size='small'\r\n              >\r\n                <CloseOutlined />\r\n              </Button>\r\n            </Tooltip>\r\n            <Tooltip placement='top' title={'OK'}>\r\n              <Button\r\n                type='primary'\r\n                onClick={() => save(record.id)}\r\n                size='small'\r\n              >\r\n                <SaveOutlined />\r\n              </Button>\r\n            </Tooltip>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Tooltip placement='top' title={'編集'}>\r\n              <Button\r\n                style={{ marginRight: '1rem' }}\r\n                onClick={() => edit(record)}\r\n                size='small'\r\n              >\r\n                <EditOutlined />\r\n              </Button>\r\n            </Tooltip>\r\n            <Tooltip placement='top' title={'削除'}>\r\n              <Button\r\n                style={{ marginRight: '1rem' }}\r\n                onClick={() => deleteQuestion(record.id)}\r\n                danger\r\n                size='small'\r\n              >\r\n                <DeleteOutlined />\r\n              </Button>\r\n            </Tooltip>\r\n            <Tooltip placement='top' title={'アンケートを始める'}>\r\n              <Button\r\n                type='primary'\r\n                size='small'\r\n                onClick={() => show(record.id)}\r\n              >\r\n                Show\r\n              </Button>\r\n            </Tooltip>\r\n          </>\r\n        )\r\n      },\r\n    },\r\n  ]\r\n\r\n  const mergedColumns = columns.map((col) => {\r\n    if (!col.editable) {\r\n      return col\r\n    }\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        inputType: col.dataIndex === 'responseTime' ? 'number' : 'text',\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    }\r\n  })\r\n\r\n  const exportQRCode = async () => {\r\n    const newUrl = await tinyUrl.shorten(\r\n      `https://realtime-demo-chart.web.app/roomplay/${id}/login`\r\n    )\r\n    Modal.info({\r\n      title: <p>{roomTitle}</p>,\r\n      centered: true,\r\n\r\n      content: (\r\n        <>\r\n          <QRCode level='H' size={256} value={newUrl} />\r\n          <a href={newUrl} target='_blank'>\r\n            {newUrl}\r\n          </a>\r\n        </>\r\n      ),\r\n      onOk() {},\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className='wrapper'>\r\n      <div>\r\n        <div className='room-info'>\r\n          <Button\r\n            style={{ marginRight: 'auto', textTransform: 'uppercase' }}\r\n            type='dashed'\r\n          >\r\n            {room?.title}\r\n          </Button>\r\n          <Button onClick={exportQRCode} style={{ marginRight: '1rem' }}>\r\n            <QrcodeOutlined />\r\n            Export QRCode\r\n          </Button>\r\n          <Button onClick={() => setVisible(true)} type='primary'>\r\n            <PlusOutlined />\r\n            質問の追加\r\n          </Button>\r\n        </div>\r\n        <div className='user-count'>\r\n          <span>{room?.members.length}</span>\r\n          ユーザがアンケートに参加しています。\r\n        </div>\r\n        <Form form={form} component={false}>\r\n          <Table\r\n            components={{\r\n              body: {\r\n                cell: EditableCell,\r\n              },\r\n            }}\r\n            dataSource={questions}\r\n            columns={mergedColumns}\r\n            loading={loading}\r\n            pagination={false}\r\n            rowKey='id'\r\n          />\r\n        </Form>\r\n        <div style={{ width: '100%', textAlign: 'right' }}>\r\n          <Button\r\n            style={{ margin: '1rem 0', textTransform: 'uppercase' }}\r\n            type='dashed'\r\n            danger\r\n          >\r\n            <Link to='/'>\r\n              <ArrowLeftOutlined />\r\n              戻る\r\n            </Link>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <ModalCreate\r\n        visible={visible}\r\n        setVisible={setVisible}\r\n        createQuestion={createQuestion}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RoomDetail\r\n","D:\\BAO\\demo-realtime\\src\\components\\Modal\\create_question.js",[],"D:\\BAO\\demo-realtime\\src\\pages\\Guest\\index.js",["106","107","108","109","110","111"],"import React, { useEffect, useState, useContext, useCallback } from 'react'\r\nimport './guest.style.css'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { firestore } from './../../firebase'\r\nimport fireworks from 'fireworks'\r\nimport ColumnChart from './../../components/ColumnChart'\r\nimport {\r\n  pairData,\r\n  LIST_ANSWERS,\r\n  ANSWER_COLORS,\r\n  configConfetti,\r\n  countAns,\r\n} from './../../utils'\r\nimport guestContext from './../../contexts/guest/guest-context'\r\nimport axios from './../../apis'\r\nimport Confetti from 'react-dom-confetti'\r\nimport { Button } from 'antd'\r\nimport Confetti2 from 'react-confetti'\r\nimport notification, { typeNotificaton } from './../../components/Notification'\r\nfunction Guest() {\r\n  const { roomId } = useParams()\r\n  const history = useHistory()\r\n  const questionRef = firestore.collection('questions')\r\n  const answerRef = firestore.collection('answer')\r\n  const [{ displayName }, guestDispatch] = useContext(guestContext)\r\n  const [data, setData] = useState({})\r\n  const [currentQuestion, setcurrentQuestion] = useState({})\r\n  const [answerList, setAnswerList] = useState([])\r\n  const [timing, setTiming] = useState(Number)\r\n  const [loading, setLoading] = useState(false)\r\n  const [currentAns, setCurrentAns] = useState('')\r\n  const clearData = () => {\r\n    setData([])\r\n  }\r\n  if (!window.localStorage.getItem('guestId')) {\r\n    history.push(`/roomplay/${roomId}/login`)\r\n  }\r\n\r\n  const handleAns = async (ans) => {\r\n    if (timing <= 0) {\r\n      notification(typeNotificaton.error, 'Timeout')\r\n      return\r\n    }\r\n    if (currentAns) return\r\n    try {\r\n      setCurrentAns(ans)\r\n      await axios.post(`/answer/${currentQuestion.id}`, {\r\n        answer: ans,\r\n      })\r\n    } catch (err) {\r\n      notification(typeNotificaton.error, 'Error occurs')\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    listenForShowQuestion()\r\n  }, [])\r\n\r\n  const listenForVoting = useCallback(async () => {\r\n    if (currentQuestion.id) {\r\n      answerRef.where('questionId', '==', currentQuestion.id || '').onSnapshot(\r\n        (snapshot) => {\r\n          // if (timing < 6) return\r\n          snapshot.docChanges().forEach(async (change) => {\r\n            if (change.doc.data().questionId === currentQuestion['id']) {\r\n              if (change.type === 'added') {\r\n                const docAns = await answerRef\r\n                  .where('questionId', '==', currentQuestion.id || '')\r\n                  .get()\r\n                const arrAns = docAns.docs.map((ans) => {\r\n                  return ans.data().answer\r\n                })\r\n                const resultArr = pairData(arrAns)\r\n                setData(resultArr)\r\n              }\r\n            }\r\n          })\r\n        },\r\n        (err) => console.log(err)\r\n      )\r\n    }\r\n  }, [currentQuestion.id])\r\n  const listenForShowQuestion = useCallback(async () => {\r\n    questionRef.where('roomId', '==', roomId).onSnapshot((snapshot) => {\r\n      snapshot.docChanges().forEach((change) => {\r\n        if (change.type === 'modified') {\r\n          if (change.doc.data().roomId === roomId) {\r\n            const {\r\n              question,\r\n              answerA,\r\n              answerB,\r\n              answerC,\r\n              answerD,\r\n              responseTime,\r\n            } = change.doc.data()\r\n            if (question) {\r\n              setTiming(responseTime)\r\n              setcurrentQuestion({\r\n                question: question,\r\n                id: change.doc.id,\r\n              })\r\n              setData([])\r\n              setCurrentAns('')\r\n              setAnswerList([answerA, answerB, answerC, answerD])\r\n            }\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }, [questionRef])\r\n\r\n  useEffect(() => {\r\n    listenForVoting()\r\n  }, [currentQuestion])\r\n\r\n  useEffect(() => {\r\n    // if (timing < 6) {\r\n    //   clearData()\r\n    // }\r\n    const timingCount = setInterval(() => {\r\n      setTiming((pre) => pre - 1)\r\n    }, 1000)\r\n    if (timing === 0) {\r\n      clearInterval(timingCount)\r\n      setLoading(true)\r\n      setTimeout(() => {\r\n        setLoading(false)\r\n      }, 2000)\r\n    }\r\n    return () => clearInterval(timingCount)\r\n  }, [timing])\r\n\r\n  const logout = () => {\r\n    guestDispatch({ type: 'LOGOUT' })\r\n    history.push(`/roomplay/${roomId}/login`)\r\n  }\r\n  return (\r\n    <div className='mobile-wrapper'>\r\n      <Confetti2 numberOfPieces={400} recycle={loading} friction={1} />\r\n      <div className='mobile-header'>\r\n        <div className='display-name'>{displayName}</div>\r\n        <div className='logout'>\r\n          <Button onClick={logout}>ログアウト</Button>\r\n        </div>\r\n      </div>\r\n      <div className='chart'>\r\n        <ColumnChart data={data} label={LIST_ANSWERS} />\r\n      </div>\r\n      {!timing && <div className='message'>Please wait the host</div>}\r\n      <div className='response-time-section'>\r\n        {currentQuestion.id && (\r\n          <div\r\n            className='response-time'\r\n            style={\r\n              timing <= 5\r\n                ? { backgroundColor: '#cc4747' }\r\n                : { backgroundColor: '#03994c' }\r\n            }\r\n          >\r\n            {timing}\r\n          </div>\r\n        )}\r\n        <div className='image'></div>\r\n\r\n        <div className='ans-count'>\r\n          <div className='count'>{countAns(data)}</div>\r\n          <div>answers</div>\r\n        </div>\r\n      </div>\r\n\r\n      {currentQuestion.id && (\r\n        <div className='question'>Question: {currentQuestion.question}</div>\r\n      )}\r\n      <div className='answer-section'>\r\n        <ul className='ans-list'>\r\n          {answerList.map((ans, idx) => (\r\n            <li\r\n              key={idx}\r\n              className='ans-item'\r\n              style={{ backgroundColor: ANSWER_COLORS[idx] }}\r\n              onClick={() => handleAns(LIST_ANSWERS[idx])}\r\n            >\r\n              {currentAns && LIST_ANSWERS[idx] !== currentAns && (\r\n                <div className='overlay'></div>\r\n              )}\r\n              <Confetti key={idx} active={currentAns} config={configConfetti} />\r\n              {LIST_ANSWERS[idx]}. {ans}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Guest\r\n","D:\\BAO\\demo-realtime\\src\\App.js",[],["112","113"],"D:\\BAO\\demo-realtime\\src\\components\\Auth\\guest_login.js",["114"],"D:\\BAO\\demo-realtime\\src\\utils\\index.js",[],"D:\\BAO\\demo-realtime\\src\\components\\EditableCell\\index.js",[],"D:\\BAO\\demo-realtime\\src\\components\\Layout\\index.js",[],"D:\\BAO\\demo-realtime\\src\\contexts\\guest\\guest-context.js",[],"D:\\BAO\\demo-realtime\\src\\contexts\\room\\room-context.js",[],"D:\\BAO\\demo-realtime\\src\\components\\Notification\\index.js",[],"D:\\BAO\\demo-realtime\\src\\pages\\Room\\index.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"115","replacedBy":"119"},{"ruleId":"117","replacedBy":"120"},{"ruleId":"115","replacedBy":"121"},{"ruleId":"117","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":3,"column":20,"nodeType":"125","messageId":"126","endLine":3,"endColumn":24},{"ruleId":"123","severity":1,"message":"127","line":5,"column":10,"nodeType":"125","messageId":"126","endLine":5,"endColumn":14},{"ruleId":"128","severity":1,"message":"129","line":20,"column":6,"nodeType":"130","endLine":20,"endColumn":8,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":29,"column":24,"nodeType":"134","endLine":29,"endColumn":65},{"ruleId":"123","severity":1,"message":"135","line":20,"column":10,"nodeType":"125","messageId":"126","endLine":20,"endColumn":19},{"ruleId":"128","severity":1,"message":"136","line":81,"column":6,"nodeType":"130","endLine":81,"endColumn":8,"suggestions":"137"},{"ruleId":"128","severity":1,"message":"138","line":98,"column":6,"nodeType":"130","endLine":98,"endColumn":8,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":284,"column":28,"nodeType":"142","endLine":284,"endColumn":43},{"ruleId":"123","severity":1,"message":"143","line":5,"column":8,"nodeType":"125","messageId":"126","endLine":5,"endColumn":17},{"ruleId":"123","severity":1,"message":"144","line":32,"column":9,"nodeType":"125","messageId":"126","endLine":32,"endColumn":18},{"ruleId":"128","severity":1,"message":"145","line":56,"column":6,"nodeType":"130","endLine":56,"endColumn":8,"suggestions":"146"},{"ruleId":"128","severity":1,"message":"147","line":81,"column":6,"nodeType":"130","endLine":81,"endColumn":26,"suggestions":"148"},{"ruleId":"128","severity":1,"message":"149","line":109,"column":6,"nodeType":"130","endLine":109,"endColumn":19,"suggestions":"150"},{"ruleId":"128","severity":1,"message":"151","line":113,"column":6,"nodeType":"130","endLine":113,"endColumn":23,"suggestions":"152"},{"ruleId":"115","replacedBy":"153"},{"ruleId":"117","replacedBy":"154"},{"ruleId":"123","severity":1,"message":"155","line":10,"column":10,"nodeType":"125","messageId":"126","endLine":10,"endColumn":20},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],["156"],["157"],["156"],["157"],"no-unused-vars","'auth' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["158"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'roomState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchQuestions'. Either include it or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'listenForActiveUser'. Either include it or remove the dependency array.",["160"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'fireworks' is defined but never used.","'clearData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'listenForShowQuestion'. Either include it or remove the dependency array.",["161"],"React Hook useCallback has missing dependencies: 'answerRef' and 'currentQuestion'. Either include them or remove the dependency array.",["162"],"React Hook useCallback has a missing dependency: 'roomId'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has a missing dependency: 'listenForVoting'. Either include it or remove the dependency array.",["164"],["156"],["157"],"'guestState' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [history]",{"range":"179","text":"180"},"Update the dependencies array to be: [fetchQuestions]",{"range":"181","text":"182"},"Update the dependencies array to be: [listenForActiveUser]",{"range":"183","text":"184"},"Update the dependencies array to be: [listenForShowQuestion]",{"range":"185","text":"186"},"Update the dependencies array to be: [answerRef, currentQuestion]",{"range":"187","text":"188"},"Update the dependencies array to be: [questionRef, roomId]",{"range":"189","text":"190"},"Update the dependencies array to be: [currentQuestion, listenForVoting]",{"range":"191","text":"192"},[660,662],"[history]",[2621,2623],"[fetchQuestions]",[3044,3046],"[listenForActiveUser]",[1872,1874],"[listenForShowQuestion]",[2759,2779],"[answerRef, currentQuestion]",[3653,3666],"[questionRef, roomId]",[3720,3737],"[currentQuestion, listenForVoting]"]